# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
#+TITLE:       PhilaJ: Philatelic Tools For ImageJ
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2021-11-29
#+DESCRIPTION: Philatelic Tools For ImageJ
#+KEYWORDS:    Philatelic stamps postage ImageJ Fiji Macro Image Processing Image Analysis
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://github.com/richmit/imagej
#+EXPORT_FILE_NAME: ../docs/PhilaJ

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|          <r> | <l>                                          |
|    *Author:* | /{{{author}}}/                               |
|   *Updated:* | /{{{modification-time(%Y-%m-%d %H:%M:%S)}}}/ |
| *Generated:* | /{{{time(%Y-%m-%d %H:%M:%S)}}}/              |
#+ATTR_HTML: :align center
Copyright {{{time(%Y)}}} Mitch Richling. All rights reserved.

#+TOC: headlines 5

#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#   010  #    020  #    030  #    040  #    050  #    060  #    070  #    080  #    090  #    100  #    110  #    120  #    130  #    140  #    150  #    160  #
# 34567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #       | #
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #       | #

* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

PhilaJ is software to assist with philatelic image analysis. It is built on top of the popular scientific image analysis package
[[https://imagej.net/][ImageJ/Fiji]].

* Some PhilaJ Features

While ImageJ is perfectly capable of philatelic image analysis out of the box, PhilaJ assists the philatelist by automating and simplifying many typical
philatelic image processing procedures.

  - Efficiently rotate and zoom images
    - A single key press can switch between 100% zoom /at the cursor/ and zoom to fit.
    - Most of the time philatelists want to rotate an image so some reference line is horizontal or vertical, and that's how this tool works.  Draw a line,
      hit a key, and the image is rotated to make the line horizontal.
    - A single key press to rotate an image 90 degrees
  - Semi-Automated measurements
    - Stamp design centering
    - Design size
    - Paper size
    - Check coil paper edges (parallel & large enough)
    - Perforations computed from linear distances
    - Measure angle difference between arbitrary edges (design, paper, perforations, etc...)
    - Measurement results can be saved or directly imported into Excel
    - Named ROIs in the ROI manager will automatically be used if they exist for many measurements
    - Measurements create ROIs to document & save results for later use
  - Perforation Measurements
    - A fully dynamic perforation gauge brings perforation measurements into the digital realm.  Simultaneously and accurately measure perforations frequency
      and hole size and on any angle
    - Perforations may be directly, and very accurately, computed from simple distance measurements
    - Display very customizable, old school perforation gauges (Instanta & Kiusalas) over the image so that perforations may be measured in the traditional
      manner.
    - Specialized gauges for particular stamps like the US Liberty Issues or AMG Bari Wolf Issue
  - Grills
    - Display a very customizable template of US Grills over image
    - Standard grill characteristics are all pre-programmed:
  - Split up an image of a sheet into a stack of individual stamps
  - Thirkell-type position finder (automatically positioned over the design ROI)
  - Millimeter Coordinate Tool (a modern, digital take on the Thirkell).
  - Tools to document plate flaws with coordinates and thumbnail images.
  - Full support for my DIY Microscope camera is included (live video, captures, measurements)
  - Sophisticated, and automatic management of physical image scales
  - Systematic use of ImageJ/Fiji ROIs across the tool

** Future Features

Some of the features listed here are very difficult to implement -- complex enough they might not even be possible.  Others are easy things I simply need to
find the time to implement.  Feel free to contact me with ideas for this list. I have no idea when, or if, I'll find the time to work on any of these, but I
have tried to sort the list from highest priority to lowest:

  - Automatic grill identification from grill boundary (Easy)
  - Reference templates for various private perforations
  - rotary vs flat press
    - Templates? (Easy)
    - Automatic measurement?  What about graphical masking with range limits? (Not Hard)
  - Watermarks
    - Templates (Easy.  Hardest part is obtaining correctly scaled source images)
    - Automatic shape identification and match to DB of templates?  Start with US. (Hard)
  - Postmarks
    - Templates (Hard)
      - Easy way to pull in an image from https://www.stampsx.com/ratgeber/stempel-datenbank.php
      - Way to categorize US post marks using the standard references
      - Way to convert reference postmark raster images into vector data
    - Postmark Image Processing
      - Way to extract postmark data from image (Hard.  Some experimental results in my ImageJ GIT repository)
  - Plate flaws (Hard)
    - Semi-automated help for comparing images and manually marking plate flaws with ROIs
      - Help with aligning the images
      - Good way to overlay the images and dynamically adjust transparency
      - Easy way to mark flaws and create ROIs
    - Fully automated analysis of an image sequence or stack to generate a "canonical stamp" & identify deviations
  - Fully automatic full sheet separation (Hard)
    - Identify individual stamps
    - Create stack
    - Align slices
  - Automatically detect paper and design edges for measurements (Hard)
    - Many of the stamps I care about most have well defined frame lines, and this could be exploited in any algorithms I develop
  - Automatically detect perforations for measurements (Hard)
    - Mostly I care about rectangular stamps only
    - It would be nice to detect the holes directly -- perhaps a multi-point, affinity-descent method to find the hole bottoms?
  - Compute perforations automatically (Hard)
    - Via Fourier transform
    - Via custom line graph analysis
  - Automatic grill identification from individual grill points (Hard)
    - Use up/down data provided by user to guide algorithm
    - Automatically detect horizontal vs vertical ridges
    - Ask user if point bounding box covers entire grill
    - Use Scott numbers provided by the user to guide algorithm

* Learning ImageJ

Because many people wishing to use PhilaJ are not already ImageJ users, this section provides some ImageJ background information and some links to learn more.

** ImageJ is not Photoshop!

ImageJ is not hard to use.  In many ways it is less complex than Photoshop or GIMP.  That said, sometimes ImageJ newcomers stumble because ImageJ looks a lot
like Photoshop & GIMP but it works quite differently.  The similarity really is just surface deep.  Tools like Photoshop are intended for image manipulation
with an eye toward the artistic.  Tools like ImageJ are intended for image measurement.

You *can* measure things with Photoshop.  You *can* draw with ImageJ.  You *can* drive a nail with a screwdriver.

So my advice while learning learning ImageJ is to keep in mind that it is a completely different tool than Photoshop or GIMP.  Do not expect similar behavior.
Do not expect your knowledge of Photoshop or GIMP to translate to ImageJ.  ImageJ is not harder to use than Photoshop or GIMP!  It is just a different sort of
tool -- screwdriver vs hammer.

** ImageJ & ROIs

The "drawing" tools on the ImageJ toolbar are not drawing tools in that they do not draw anything (i.e. they do not manipulate the image in any way).  Instead
they allow the user to identify "regions of interest" -- parts of the image we wish to measure.  For example, we might use the rectangle tool to identify the
edges of a stamp's design -- so we can measure it's size perhaps to tell if it's a rotary or flat press print.  As another example, we might use the line tool
to identify the distance required for 11 perforation holes, and use that distance to compute the stamps perforation gauge.  We might select an irregular
region of the design so we can measure the colors, and then compare them to a part of the stamp we suspect may have been fraudulently manipulated.

The closest concept in Photoshop/GIMP are /selections/, but ImageJ /ROIs/ are a far more general concept.

Once again.  ImageJ is all about measuring things.  Distances, sizes, colors, etc...

** Overlays

Overlays are images & annotations placed over the image we we analyzing.  Back in the day, scientists would place a transparent film over a photograph and
then draw on the film.  Overlays are the digital equivalent.  Overlays don't modify the image pixels at all.  The classical application of overlays in
scientific image analysis is to annotate an image.  For example, a Doctor might highlight and label the location of a bone fracture on an X-ray.  An overlay
may be dragged around over the image making it a useful tool for comparisons.  Such comparisons generally take one of two forms:
 - Looking for differences between two images
 - Seeing if an image matches some standard
The two most common philatelic applications for image comparison are:
 - Comparing too stamps looking for plate flaws & faults.
 - Comparing a stamp and the image on a certificate.  i.e. is the stamp for sale is the one pictured on the cert.
The most common philatelic applications for comparison to a standard are:
 - Comparing stamp perforations to a perforation gauge (be it an Instanta-type or Kiusalas-type)
 - Comparing a grill to a grill template
 - Comparing a design to a rotary vs. flat plate template

The closest concept in Photoshop/GIMP are /layers/, but they are quite different in a few respects.  The most obvious difference is a matter of content.  An
ImageJ overlay may contain ROIs, vector graphics, and raster data (images).  In Photoshop/GIMP layers only contain raster data (images).  Another big
difference is a mater of quantity.  In Photoshop many layers normally exist in one file; however, in ImageJ you only get one.  The last big difference is in
how we use them.  In Photoshop/GIMP layers exist to be mixed together so that we may render a final image.  In ImageJ an overlay is sometimes used to create
an image (say for a scientific publication); however, overlays overlays find far more use as a tool for active analysis and measurement.

** Learning how to use ImageJ

To use PhilaJ, I think the basic tutorial at [[https://imagej.net][imagej.net]] is enough: https://imagej.net/learn/

The [[https://imagej.net][imagej.net]] site is stuffed full of great content, and is one of the best sources if you want to become an ImageJ expert.  That
said, I think the tutorial linked above is all you really need to get started with PhilaJ.

* Using PhilaJ

** Install Fiji

From this point on, this document assumes you are using the Fiji distribution of ImageJ.  If you have not yet installed it, then do so now:
https://imagej.net/software/fiji/

I recommend that you install it someplace in your user directory.

** Installing PhilaJ

*** The PhilaJ Package

Installing PhilaJ requires the "=imagej/PhilaJ-and-RPI_Tools/PhilaJ.ijm=" file in the PhilaJ distribution be copied into the Fiji toolsets directory.  This
directory is normally named "=macros/toolsets/=", and may be found inside the Fiji install directory.  For example, I install Fiji at
"=c:\Users\richmit\PF\Fiji.app=", and thus I copy the "=PhilaJ.ijm=" file to "=c:\Users\richmit\PF\Fiji.app\macros\toolsets\PhilaJ.ijm=".

If ImageJ was running when you copied the file, then you need to quite and restart it.

*** Specialized Perforation Gauges

You will also want to install some specialized perforation gauges.  Several gauges are shipped as part of the PhilaJ distribution in the
"=imagej/PhilaJ-and-RPI_Tools/SpecializedGauges=" directory.  For instructions on how to install these gauges see: [[#custom-spec-gauge][=Install New
Specialized Gauge=]].

*** Settings

ImageJ's default measurement settings are not ideal for PhilaJ, so we need to change those defaults.  Select "Analyze -> Set Measurements" from the main
ImageJ menu:

#+ATTR_HTML: :align center :width 800px
[[file:PhilaJ-setup-measure-menu.gif][file:PhilaJ-setup-measure-menu.gif]]

The following dialog box will appear:

#+ATTR_HTML: :align center :width 400px
[[file:PhilaJ-setup-measure-dialog.gif][file:PhilaJ-setup-measure-dialog.gif]]

It is important to select the three highlighted options:
 - Area
 - Bounding rectangle
 - Display label
You can select others options as desired.

Why are these options important?
 - *Area:* This one is used for centering, design, and paper measurements.
 - *Bounding rectangle:*  This one is used by most tools.  It identifies the location and size of an ROI.
 - *Display label:* PhilaJ frequently adds multiple measurements to the results window, and without labels they aren't very useful.

** Activate PhilaJ

:PROPERTIES:
:CUSTOM_ID: toolbar-activate
:END:

The PhilaJ toolset is activated via the toolset menu:

#+ATTR_HTML: :align center :width 800px
[[file:PhilaJ-toolbar-b4m-anno.gif][file:PhilaJ-toolbar-b4m-anno.gif]]

Then the PhilaJ macro set is selected:

#+ATTR_HTML: :align center :width 800px
[[file:PhilaJ-toolbar-tbm-anno.gif][file:PhilaJ-toolbar-tbm-anno.gif]]

Once activated, it will add a few buttons to the toolbar:

#+ATTR_HTML: :align center :width 800px
[[file:PhilaJ-toolbar-pmi-anno.gif][file:PhilaJ-toolbar-pmi-anno.gif]]

In addition to the buttons, a few keyboard shortcuts will now be activated!

** Keyboard short-cuts
:PROPERTIES:
:CUSTOM_ID: keybindings
:END:

| Key                   | Action                                                                        |
|-----------------------+-------------------------------------------------------------------------------|
| =[1]= (top row digit) | [[#phil-rotate][=Rotate Line to Horizontal=]] -- Also clears the overlay      |
| =[2]= (top row digit) | [[#phil-rotate][=Rotate 90 Degrees Right=]] -- Also clears the overlay        |
| =[3]= (top row digit) | Zoom To Selection                                                             |
| =[5]= (top row digit) | Zoom 100% @ Cursor or if already zoomed at 100%, then switch to original zoom |
| =[o]= (lowercase)     | [[#load-save-magic][=Load image & ROI sidecar.  Attempt to set Scale.=]]      |
| =[s]= (lowercase)     | [[#load-save-magic][=Save image & ROI sidecar=]]                              |
| =[S]= (Uppercase)     | [[#load-save-magic][=SaveAs image & ROI sidecar=]]                            |
| =[J]= (Uppercase)     | [[#sub-image][=Selection to JPEG=]]                                           |
| =[g]= (lowercase)     | Restore/Toggle PhilaJ Overlay                                                 |
| =[p]= (lowercase)     | Reserved                                                                      |
| =[M]= (lowercase)     | [[#overlay-measure][=Overlay/ROI Measure=]]                                   |

** Tool-set Buttons
:PROPERTIES:
:CUSTOM_ID: tool-set-buttons
:END:

[[file:PhilaJ-philaj-buttons.gif][file:PhilaJ-philaj-buttons.gif]]

*** Overlay Menu (images & annotations drawn over the stamp image in a nondestructive way)

 - file:PhilaJ-button-overlay.gif ::
   - ---
   - =Remove/Reset Overlay=
   - [[#overlay-measure][=Overlay/ROI Measure=]]
   - ---
   - [[#dynamic-perf-gauge][=Dynamic Perforation Gauge=]]
   - [[#dynamic-perf-gauge][=Dynamic Perforation Gauge Options=]]
   - [[#dynamic-perf-gauge][=Dynamic Perforation Gauge Presets=]]
   - ---
   - [[#static-perf-gauge][=Instanta-Style Perforation Gauge=]]
   - [[#static-perf-gauge][=Instanta-Style Perforation Gauge Options=]]
   - ---
   - [[#static-perf-gauge][=Specialized Perforation Gauge=]]
   - [[#static-perf-gauge][=Specialized Perforation Gauge Options=]]
   - [[#static-perf-gauge][=Single Line Specialized Perforation Gauge Options=]]
   - [[#static-perf-gauge][=Single Line Specialized Perforation Gauge Presets=]]
   - [[#custom-spec-gauge][=Install New Specialized Gauge=]]
   - ---
   - [[#pos-finder][=Position Finder=]]
   - [[#pos-finder][=Position Finder Options=]]
   - ---
   - [[#coord-tool][=Coordinate Tool=]]
   - [[#coord-tool][=Coordinate Tool Options=]]
   - ---
   - [[#grill-tool][=Grill=]]
   - [[#grill-tool][=Grill Type & Options=]]
   - [[#grill-tool][=Grill Options=]]

*** Overlay Interaction tool
:PROPERTIES:
:CUSTOM_ID: tool-set-buttons-interact
:END:

 - file:PhilaJ-button-overlayInteract.gif ::

   The [[#tool-set-buttons-interact][=PhilaJ Overlay Interaction Tool=]] allows a user to manipulate overlays created by the previous menu.  For example, the
   [[#static-perf-gauge][=Instanta-Style Perforation Gauge=]] and [[#static-perf-gauge][=Specialized Perforation Gauge=]] may be moved around over an image in
   order to align them with a stamp's perforations.  Some overlays, like the [[#dynamic-perf-gauge][=Dynamic Perforation Gauge=]], may be manipulated in more
   complex ways.  Non-PhilaJ overlays can be moved around with this tool.

   This toolbar button has a super power -- Right click on it to bring up the primary options dialog for the currently active PhilaJ overlay.

*** Image Scale Menu (so we can measure things like distances & perforations)

 - file:PhilaJ-button-scale.gif  ::
   - ---
   - [[#set-scale-dpi][=Set scale for DPI: 2410x2398=]]   -- This odd DPI is what I get at the center of the platen on my Epson scanner. ;)
   - [[#set-scale-dpi][=Set scale for DPI: 2400=]]
   - [[#set-scale-dpi][=Set scale for DPI: 1200=]]
   - [[#set-scale-dpi][=Set scale for DPI: 600=]]
   - [[#set-scale-dpi][=Set scale for DPI: 300=]]
   - ---
   - [[#set-scale-dpi][=Set scale for DPI=]]
   - [[#set-scale-dpi][=Set Scale for Hoiz & Vert DPI=]]
   - [[#set-scale-filename][=Set scale from DPI file name=]]
   - ---
   - [[#scale-roi][=Set scale from scale ROI=]]
   - [[#scale-roi][=Create scale ROI and add it to the ROI manager=]]
   - ---
   - [[#scale-alt][=Set Scale via standard ImageJ dialog=]]
   - [[#scale-alt][=Set Scale 1D=]]
   - [[#scale-alt][=Set Scale 1D from measurement results table=]]
   - [[#scale-alt][=Set Scale 2D=]]
   - [[#scale-alt][=Set Scale 2D from measurement results table=]]
   - [[#scale-rpi][=Set Scale for Stereo Microscope Photograph=]]
   - ---
   - [[#set-scale-convert][=Convert image scale units to mm=]]
   - [[#scale-image-scale][=Shrink image to make pixels square=]]
   - [[#scale-image-scale][=Resize image to target DPI=]]
   - ---
   - =Remove Scale=
   - [[#scale-report][=Scale Report=]]

*** Acquiring & Saving Images & Data Menu

 - file:PhilaJ-button-files.gif  ::
   - ---
   - [[#rpi-settings][=Configure RPI Microscope Camera=]]
   - [[#rpi-preview][=Live Video From RPI Microscope Camera (no capture)=]]
   - [[#rpi-capture][=Capture Image From RPI Microscope Camera=]]
   - [[#rpi-load][=Load Previous RPI Microscope Camera Captures=]]
   - ---
   - [[#roi-sidecars][=Load ROIs from PhilaJ sidecar file=]]
   - [[#roi-sidecars][=Save ROIs to PhilaJ ROI sidecar file=]]
   - ---
   - [[#note-sidecars][=Load Notes from PhilaJ sidecar file=]]
   - ---
   - [[#load-save-magic][=Load image & ROI sidecar.  Attempt to set Scale.=]]
   - [[#load-save-magic][=Save image & ROI sidecar=]]
   - [[#load-save-magic][=SaveAs image & ROI sidecar=]]
   - ---
   - =Save Image As PNG=
   - =Load Image=
   - ---
   - [[#cleaning-up-windows-n-files][=Delete current image file=]]
   - [[#cleaning-up-windows-n-files][=Delete current image file & close image window=]]
   - [[#cleaning-up-windows-n-files][=Delete current image file & close associated windows=]]
   - ---
   - [[#cleaning-up-windows-n-files][=Close PhilaJ Windows=]]
   - [[#cleaning-up-windows-n-files][=Close PhilaJ & Related Windows=]]
   - [[#cleaning-up-windows-n-files][=Close Image, PhilaJ, & Related Windows=]]
   - ---
   - [[#bulk-processing][=Process a single scan=]]
   - [[#bulk-processing][=Process a directory of scans=]]
   - [[#sub-image][=Selection to image (with scale)=]]
   - [[#sub-image][=Selection to JPEG=]]
   - [[#make-preview][=Create Preview & Thumbnail Images=]]
   - [[#stamp-crop][=Stamp Crop w/ Previous Settings=]]
   - [[#stamp-crop][=Stamp Crop w/ New Settings=]]
   - [[#make-roianno-preview][=Create ROI Annotated Image=]]


*** Everything Else Menu

 - file:PhilaJ-button-misc.gif  ::
   - ---
   - =ROI Manager...=
   - [[#roi-name-tools][=Bulk ROI Rename=]]
   - [[#roi-cleanup][=Clean up ROI list=]]
   - [[#centering-measurements][=Delete centering report ROIs=]]
   - [[#make-stamp-roi][=Create Special Stamp ROI=]]
   - ---
   - [[#centering-measurements][=Measure Design=]]
   - [[#centering-measurements][=Measure Paper=]]
   - [[#centering-measurements][=Centering Report=]]
   - [[#measure-edges][=Coil Edge Check=]]
   - [[#reuse-dynamic-perf-roi][=Measure Dynamic Perf ROI=]]
   - [[#reuse-dynamic-perf-roi][=Measure ALL Dynamic Perf ROIs=]]
   - ---
   - [[#measure-edges][=Angle & Distance Between Edges=]]
   - [[#measure-offset][=Offset Between ROIs=]]
   - =Create grill box ROI from grill points ROI=
   - ---
   - [[#phil-rotate][=Rotate Line to Horizontal=]]
   - [[#phil-rotate][=Rotate 90 Degrees Right=]]
   - ---
   - [[#sep-block][=Separate stamp multiple=]]
   - [[#block-d-roi][=Make Design ROIs for Multiple=]]
   - ---
   - [[#phil-units][=Convert Distance to Perforation Measurement=]]
   - [[#phil-units][=Convert Kiusalas to Perforations per 2cm=]]
   - [[#phil-units][=Convert Perforations per 2cm to Kiusalas=]]
   - [[#phil-units][=Convert length to millimeters=]]
   - ---
   - [[#phil-data][=Kiusalas Table=]]
   - [[#phil-data][=Grill Table=]]
   - ---
   - [[#measure-color][=Measure Color=]]
   - [[#measure-color][=Compare Two Colors=]]

** PhilaJ Tools
*** Dynamic perforation gauge
:PROPERTIES:
:CUSTOM_ID: dynamic-perf-gauge
:END:

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-overlay-dynamicPerf.gif][file:PhilaJ-overlay-dynamicPerf.gif]]

The dynamic perforation gauge is a fully interactive, digital perforation gauge capable of making very precise measurements of both perforations and hole
size.  With physical perforation gauges one finds the gauge row that most closely matches the perforation holes.  The dynamic gauge only has one row of
perforation dots, and the user adjusts the location (and optionally size) of these dots to match the perforation holes.  The dynamic perforation gauge is
started by selecting one of the following menu items in the overlay menu: [[#dynamic-perf-gauge][=Dynamic Perforation Gauge=]],
[[#dynamic-perf-gauge][=Dynamic Perforation Gauge Options=]], or [[#dynamic-perf-gauge][=Dynamic Perforation Gauge Presets=]].

When using the [[#dynamic-perf-gauge][=Dynamic Perforation Gauge Options=]] menu item, the dialog below will appear before the perforation gauge overlay is
drawn.

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-dynamicPerf-Options.gif][file:PhilaJ-dialog-dynamicPerf-Options.gif]]

When using the [[#dynamic-perf-gauge][=Dynamic Perforation Gauge Presets=]] menu item, the dialog below will appear.  These presets will set the initial hole
size & spacing.  Immediately after the preset dialog, the options dialog will be displayed just as if the [[#dynamic-perf-gauge][=Dynamic Perforation Gauge
Options=]] had been used.

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-dynamicPerf-Presets.gif][file:PhilaJ-dialog-dynamicPerf-Presets.gif]]

The initial placement of the overlay may be controlled by an active line ROI when [[#dynamic-perf-gauge][=Dynamic Perforation Gauge=]] or
[[#dynamic-perf-gauge][=Dynamic Perforation Gauge Options=]] is used -- but not [[#dynamic-perf-gauge][=Dynamic Perforation Gauge Presets=]].

 - If a line ROI was active when the menu option was selected, then the gauge will appear on the line
 - If a line ROI is one previously created by the dynamic perforation gauge, then the number of perforation holes and perforation hole size may be
   automatically set.
 - If no ROI is selected, then the gauge appears with the first dot in the upper left of the image and extending to the right

Once the gauge is displayed, it may be dynamically adjusted onscreen.  While being adjusted a live perforation measurement may displayed.  This live
measurement may be presented in one of two ways: 1) graphically over the image itself, or 2) in a popup window.

 - Click and drag any perforation gauge dot to move the dot around.  Note that the end dot furthest away from the one you clicked on stays put while all the
   other dots follow your mouse around.  The typical procedure is to drag an end dot to the first hole on the stamp, and then drag a dot on the other end of
   the perforation gauge to a hole on the other side of the stamp.
 - If the HUD perforation report is being displayed, clicking on the HUD will allow you to drag just the HUD around.  This is useful when the HUD is placed
   over a cluttered part o the stamp making the HUD hard to read.
 - Clicking outside of the HUD and any perforation allows you to drag the entire perforation gauge line around on the display.  This can be useful if you have just
   measured perfs on one edge, and wish to measure the other edge.
 - Shift-Click outside of any perforation and drag to resize the perforation gauge holes.  Moving away from the gauge makes the holes larger, and moving
   toward the gauge makes them smaller.  The rate of change as you drag is slowed down to make precise chances possible, but this means that if large changes
   need to be made to the size you might have to repeat the procedure.
 - Dots can be added or removed with an Alt-Click
   - Alt-Click on a dot, and all the dots left/right of that dot will be removed to the closet gauge end.
   - Alt-Click outside of any dot, and all a new dot will be added to the end of the gauge closet to the clicked point
   - The number of dots may also be added by bringing up the options dialog, and changing the value in the dialog.  When changed in this manner, the end dots
     stay put and the gauge is redrawn.
 - Control-click to get a perforation report or use the [[#overlay-measure][=Overlay/ROI Measure=]] command

In summary:

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
 | Event              | Where   | Action                            |
 |--------------------+---------+-----------------------------------|
 | SHIFT-CLICK & Drag | off dot | resize dots                       |
 | CLICK & Drag       | on HUD  | translate HUD                     |
 | CLICK & Drag       | on dot  | translate dot                     |
 | ALT-CLICK          | on dot  | delete end dots after clicked dot |
 | ALT-CLICK          | off dot | Add a dot on end closest to click |
 | CONTROL-CLICK      | N/A     | Get a perforation report          |
 | =[M]=              | N/A     | Get a perforation report          |

Once the gauge is adjusted to align with the stamp's perforation holes, a detailed perforation report may be generated via the
[[#overlay-measure][=Overlay/ROI Measure=]] menu selection or by pressing the [[#keybindings][=[M]=]] key -- note that is an upper case "M".

The report will be in a popup (just like the live measurement popup) if the option "=Results in measure table=" is not selected, otherwise it will be in the
ImageJ measurement results window.  If the "=ROI Manager Use=" option is set to anything other than "=NONE=", then ROIs describing the perforation gauge will
be saved in ROI manager for later recall -- see the section [[#reuse-dynamic-perf-roi][Reusing Dynamic Perforation Gauge ROIs]].
*** Reusing Dynamic Perforation Gauge ROIs
:PROPERTIES:
:CUSTOM_ID: reuse-dynamic-perf-roi
:END:

ROIs created by the [[#dynamic-perf-gauge][=Dynamic Perforation Gauge=]] can be used in a few different ways.  Most directly, if one is active when the
[[#dynamic-perf-gauge][=Dynamic Perforation Gauge=]] menu is selected, then the [[#dynamic-perf-gauge][=Dynamic Perforation Gauge=]] will startup with
matching perforation spacing, hole count, and hole size.  At this point the perforations can be remeasured, or the gauge may be adjusted.

The [[#phil-units][=Convert Distance to Perforation Measurement=]] menu item will also create a perforation report if a [[#dynamic-perf-gauge][=Dynamic
Perforation Gauge=]] *line* ROI is active when the menu is selected.  In this case a dialog will appear allowing the user to manually adjust the numbers
before the report is generated.

To simply remeasure the perfs, the [[#reuse-dynamic-perf-roi][=Measure Dynamic Perf ROI=]] item is the way to go.  To generate a summary report for every
[[#dynamic-perf-gauge][=Dynamic Perforation Gauge=]] ROI in the ROI Manager, use the [[#reuse-dynamic-perf-roi][=Measure ALL Dynamic Perf ROIs=]] menu item.
*** Static perforation gauges
:PROPERTIES:
:CUSTOM_ID: static-perf-gauge
:END:

The "static" perforation gauges are just like the physical perforation gauges we use.  They work just like physical perforation gauges too.  That is to say,
one activates the gauges and then moves it around to line up the gauge on the perforations to be measured.  In PhilaJ they come in two varieties:

 - "Instanta-Style"   -- Continuous lines graduated with perforation measurements
 - "Specialist-Style" -- rows of dots like the Kiusalas gauges

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-overlay-instaPerf1.gif][file:PhilaJ-overlay-instaPerf1.gif]]

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-overlay-spl.gif][file:PhilaJ-overlay-spl.gif]]

These tools are found in the overlay menu. [[#static-perf-gauge][=Instanta-Style Perforation Gauge=]] & [[#static-perf-gauge][=Specialized Perforation
Gauge=]] will draw the gauge immediately using the most recent, or default, settings.  If you wish to change settings first, then the
[[#static-perf-gauge][=Instanta-Style Perforation Gauge Options=]] & [[#static-perf-gauge][=Specialized Perforation Gauge Options=]] menu items will pop up a
settings dialog before drawing the overlay.

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-instaPerf-Options.gif][file:PhilaJ-dialog-instaPerf-Options.gif]]

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-splPerf-Options.gif][file:PhilaJ-dialog-splPerf-Options.gif]]

One "moves" the gauge around via the [[#tool-set-buttons-interact][=PhilaJ Overlay Interaction Tool=]] -- the button just to the right of the overlay menu
button.  Simply click and drag while the [[#tool-set-buttons-interact][=PhilaJ Overlay Interaction Tool=]] is active to move the gauge around.

Note that the stamp perforations must be perfectly lined up on a horizontal line to use these gauges!  To do that, draw a line along the tops/bottoms of the
perf holes, and then use the [[#phil-rotate][=Rotate Line to Horizontal=]] tool -- in the misc menu or via the keybinding [[#keybindings][=[1]=]].  After you
have measured the horizontal perforations and wish to measure the vertical ones, rotate the image 90 degrees via the [[#phil-rotate][=Rotate 90 Degrees Right=]] tool
-- in the misc menu or via the keybinding [[#keybindings][=[2]=]].

Unlike physical gauges, these gauges can be customized in various ways.  First the graphical presentation (colors, line widths, etc...) can all be customized
to make them more readable.  Secondly, they can be customized geometrically as well.  The Instanta-Style gauges can have the overall range adjusted and the
graduations (1/10, 1/4, 1/2) adjusted.  Note that by reducing the range one can obtain very accurate measurements with the Instanta-Style gauge.

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-overlay-instaPerf2.gif][file:PhilaJ-overlay-instaPerf2.gif]]

The specialist-style options dialog provides a drop down of several gauges (Kiusalas, traditional Kiusalas, Bari Wolf, etc...).  The end user can add to this
list by saving CSV files describing new gauges (see: [[#custom-spec-gauge][=Install New Specialized Gauge=]]).

If you just need a custom one row specialist-style gauge, then you can use the single line specialist gauge.  It allows the user to specify the perforation
frequency and perf sizes in a popup dialog.  It automatically converts various measures for frequency and dot size so you don't have to use millimeters.  I
use this sometimes when working with a pile of stamps that need to be divided into two perforation groups -- i.e. a stamp fits the gauge or doesn't.  This
gauge is available via the [[#static-perf-gauge][=Single Line Specialized Perforation Gauge Options=]] & [[#static-perf-gauge][=Single Line Specialized
Perforation Gauge Presets=]] menu options.

*** User Installable Customized Specialist Gauges
:PROPERTIES:
:CUSTOM_ID: custom-spec-gauge
:END:

Then menu option [[#custom-spec-gauge][=Install New Specialized Gauge=]] in the overlay menu allows one to install new specialized gauges.

New gauges are described via a CSV file -- which you can make with a text editor or Excel.  These files contain three columns:
 - Gaps -- the center to center distance between perf holes (in millimeters)
 - Hole Sizes -- the diameter of the hole (in millimeters)
 - Preset -- If "Y" then the line will be included presets for the one line specialized gauges and the dynamic perforation gauge.
 - Labels -- a bit of text to identify each row of perforations

Here is an example of a custom gauge for the Bari Wolf issue (this file shipps with PhilaJ):

#+INCLUDE: SpecializedGauges/Bari_Wolf_AMG.csv src text

The CSV files live in the "=perfs=" folder inside your PhilaJ configuration file directory.

The [[#custom-spec-gauge][=Install New Specialized Gauge=]] menu option simply queries the user for a CSV file name, an copies it into the
[[#config-files][PhilaJ Configuration Directory]].  You don't need to use the [[#custom-spec-gauge][=Install New Specialized Gauge=]] menu option -- you can
copy them in via the command line or a file explorer-like tool if you wish.  All that matters is that they are in the correct place.  Once they are installed,
the new gauges will show up in the specialized perforation options dialog -- no need to restart ImageJ.

Note the filenames are used much like ImageJ macro files.  For example, a file named "=AM_Post_BEP.csv=" will result in a menu option named "=AM Post BEP=" --
i.e. the underscores are turned into spaces and the extension is removed.

See the section [[#spec-gauge-list][Available Specialist gauges and presets]] for more information regarding gauges shipped with PhilaJ.

*** Measuring Design & Margins
:PROPERTIES:
:CUSTOM_ID: centering-measurements
:END:

PhilaJ can be used to make various centering & paper measurements.

These tools require the design and/or paper edges to be identified via ROIs.  When running one of these measurement tools, they look in the ROI manager for an
appropriately named ROI first.  If a single usable ROI is found, then it is used.  If multiple appropriate ROIs are found, then the user is ask to select the
one to use.  If no appropriate ROIs are found, then the user is prompted to create the required ROI(s) -- these new ROIs are automatically placed in the ROI
manager with an appropriate names.

We have three measurement functions.  The first two are quite simple: [[#centering-measurements][=Measure Design=]] & [[#centering-measurements][=Measure
Paper=]].  They simply measure the design (or paper) and the its bounding box, and place/update a bounding box ROI in the ROI manager.  Both the ROI *and* its
[[#bb-hr-roi][bounding box]] are measured because these two functions do *not* require the ROIs to be rectangles -- so the two measurements might be different.

The most interesting command is the [[#centering-measurements][=Centering Report=]] option which pops up a dialog box with a number of measured values related
to centering & margins.  The centering report requires both a paper and a design ROI, and the paper ROI *must* be a rectangle.  A "margin" is a rectangular
ROI of maximal size between one edge of the paper ROI and the design.  They are denoted in yellow in the image below.

#+ATTR_HTML: :align center :width 800px
[[file:PhilaJ-meas-centeringRep.gif][file:PhilaJ-meas-centeringRep.gif]]

**** Centering Metrics

No universal standard exists for how to measure centering, so I have included several values commonly used by various groups.  If you have a favorite
centering formula that's missing, then drop me a line.

| Value                          | Description                                                                             |
|--------------------------------+-----------------------------------------------------------------------------------------|
| Margin: Left                   | Size in mm                                                                              |
| Margin: Right                  | "                                                                                       |
| Margin: Top                    | "                                                                                       |
| Margin: Bottom                 | "                                                                                       |
| Balance: Left vs Right (?>?)   | 100 multiplied by the smaller margin and divided by the larger one                      |
| Balance: Top vs Bottom (?>?)   | "                                                                                       |
| Balance: Vert vs Horiz (?>?)   | "                                                                                       |
| Balance: Max vs Min (?>?)      | "                                                                                       |
| Margin Ratio: Left             | 100.0 multiplied by the size of the named margin and divided by the largest margin size |
| Margin Ratio: Right            | "                                                                                       |
| Margin Ratio: Top              | "                                                                                       |
| Margin Ratio: Bottom           | "                                                                                       |
| Average Vert (L&R)             | Average of the sizes                                                                    |
| Average Horiz (T&B)            | "                                                                                       |
| Average Margin                 | "                                                                                       |
| Margin Area Ratio: Vert (L&R)  | 100.0 multiplied by the sum of the named margin areas and paper area                    |
| Margin Area Ratio: Horiz (T&B) | "                                                                                       |
| Area Ratio: Design Box         | Area of the [[#bb-hr-roi][bounding box]] for the design                                 |
| Area Design Box                | Area in square mm                                                                       |
| Area Paper ROI                 | "                                                                                       |
| Area Horiz (T&B) Margins       | Sum of the two areas                                                                    |
| Area Vert (L&R) Margins        | "                                                                                       |

**** ROI Details

The most common use case is a single stamp with a single design.  In this case the design ROI will be named "=design=" and the paper ROI will be named
"=paper=".  For blocks with multiple stamps, each with a single design, the ROIs are augmented with a "stamp ID" like so: "=design_SID=" & "=paper_SID=".  For
example, a coil pair might have paper ROIs named "=paper_left=" & "=paper_right=".  The "stamp ID" is just an end user label -- some recommendations labels
may be found in the section [[#roi-name-components][About ROI Name Components]].  Things get more complex when a stamp has more than one design.  This might
be a double impression, different design components, etc...  In this case the design ROI gets a "Suffix" -- another end user defined label.  For example, a
double impression design ROI pair might be named: "=design-imp1=" & "=design-imp2=".  Note that a "stamp ID" starts with an underscore, while a "suffix"
starts with a dash.  This allows us to use both a "stamp ID" and a "suffix".  For example: "=design_left-imp1=" & "=design_left-imp2=".

For the most common use case (a single stamp with a single design), the software will guide the user in creating & saving ROIs if necessary, and will reuse
them in the future.  This is all automatic.  Thus, for the most common use case, the end user can remain completely ignorant of how the ROIs are stored, named,
and used.

All three measurement tools discussed in this section construct [[#bb-hr-roi][bounding box]] ROIs.  In addition, the centering report also creates margin
ROIs.  These ROIs may be deleted with the [[#centering-measurements][=Delete centering report ROIs=]] menu option.  Note only ROIs with an associated ROI in
the ROI manager are deleted.  That is to say "=fooBB=" will only be deleted if a "=foo=" ROI exists.  The idea is to only delete bounding box ROIs which may
be recreated.


*** Create Special Stamp ROI
:PROPERTIES:
:CUSTOM_ID: make-stamp-roi
:END:

The [[#make-stamp-roi][=Create Special Stamp ROI=]] menu option automates the creation of some useful ROIs given a reference point on a stamp.  For example,
by identifying the upper left corner of the design frame, the system can automatically create a design ROI.  Of course the sizes of and locations of such ROIs
will differ by issue, and so the system is driven by a user extendable list of rules for how to make ROIs.  Here is the configuration file that ships with
PhilaJ:

#+INCLUDE: "dot-philaj/stampROIRules.csv" src txt

The configuration file is called "=stampROIRules.csv=", and is located in the [[#config-files][PhilaJ Configuration Directory]].  If the file is missing, then
the ROI tool will have no rules, and generate an error message.

*** Coordinate Tool
:PROPERTIES:
:CUSTOM_ID: coord-tool
:END:

The [[#coord-tool][=Coordinate Tool=]] is used to identify "X,Y" coordinates in millimeters on the surface of an object (stamp, sheet, cover, etc...) with an
arbitrary origin reference point.  It can be used as a more precise replacement for the Thirkell position finder when the reference point is the upper left
corner of the design bounding box.  In addition, the [[#coord-tool][=Coordinate Tool=]] has more sophisticated options for documenting points and regions via
ROIs and saved image files.

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-overlay-cTool.gif][file:PhilaJ-overlay-cTool.gif]]

The coordinate tool may be started up via the [[#coord-tool][=Coordinate Tool=]] or [[#coord-tool][=Coordinate Tool Options=]] menu selections.  The second
provides a chance to change the tool settings before drawing the overlay:

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-cTool-Options.gif][file:PhilaJ-dialog-cTool-Options.gif]]

If an ROI is active when the tool is started up, then a popup will ask if the coordinate origin should be set to the upper left hand corner of the current
ROI's bounding box.  If this ROI has an =SID=, then it will be stored in the "ROI Name SID" field of the options dialog.  Unlike the [[#pos-finder][=Position
Finder=]] tool, this the coordinate reference point may be freely moved around on the image using the [[#tool-set-buttons-interact][=PhilaJ Overlay Interaction
Tool=]] (by holding down the =[shift]= key and dragging with the left mouse button).

Like the [[#pos-finder][=Position Finder=]] tool, clicking on the image with the [[#tool-set-buttons-interact][=PhilaJ Overlay Interaction Tool=]] active adds
a point to the the measurement results with additional columns "=relX=" & "=relY=" -- the distance right and down from the origin in millimeters.  Note a pair
of lines are also temporarily drawn on over the image connecting the point clicked to the X & Y axes of the coordinate system -- this is only drawn when the
option "=Draw Point ROI Axis Guides=" is selected in the options dialog.  Also note the complex name for the ROI in the measurement window -- this name is
controlled by the following options: "=ROI Name Prefix=", =ROI Name Coords=", "=ROI Name Box Size=", and "=ROI Name SID=".

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-overlay-cToolPt.gif][file:PhilaJ-overlay-cToolPt.gif]]

One additional feature is the ability to quickly make rectangular selections and even save them to disk.  My primary use case for this feature is to document
plate flaw locations and make tiny JPEGs for inclusion into my albums.  These rectangular selections are made just like the point selections already
discussed, but the =[control]= key is pressed while clicking.  Note the image below has no "Axis Guides" because the option "=Draw Box ROI Axis Guides=" was
not selected when this selection was made -- the default.  Also note that we have *two* entries in the measurement results window.  The first is for the point
we clicked on, and the second is for the region.  In this case both ROIs have different names, but some combinations of naming options can lead to the two ROIs
having the same name. In addition to having measurement window entries, we also have a new ROI in the ROI manager this time -- because we had the "=Save box
ROIs in the ROI Manager=" option selected before we clicked.  Note some combinations of naming options can lead to the two ROIs having the same name.

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-overlay-cToolBx.gif][file:PhilaJ-overlay-cToolBx.gif]]

The size of the selection is determined by the tool options.  The precise location of the selection is influenced by the "=Image Coordinates in JPEGs="
option.  If it is set to "=pixels=" or "=thirkell=", then the rectangle will be precisely centered on the point clicked.  If it is set to "physical" and the
region is bigger than 3mm, then the upper left corner of the selection will be on an even millimeter coordinate point.  This "rounding" of the upper left
coordinate point allows us to communicate the location of the flaw image in even millimeter values.  If the option "=Save Box Images=" is selected, then a
JPEG of the box will be saved (For more information see the section: [[#sub-image][Making Images From Selections]]).  The image name will, by default, contain
the size and coordinates of the selection.  Here is the JPEG for the previous selection:

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-eximg-cToolBox.gif][file:PhilaJ-eximg-cToolBox.gif]]

Note the "thirkell" option for units will put the Thirkell coordinates of the point clicked in the JPEG file name.  These coordinates are based on the origin
of the [[#coord-tool][=Coordinate Tool=]] and a 3mm grid size.  Note the region may be set larger or smaller if desired, but the coordinates will always be
based on the standard 3mm grid size of the Thirkell Position Finder.

Note the "physical" option always means "millimeters" because all images in PhilaJ are scaled in units of millimeters.
*** Position Finder
:PROPERTIES:
:CUSTOM_ID: pos-finder
:END:

The idea is to identify the *location* of plate flaws (or anything really) using coordinates in terms of the upper left corner of the design.  Starting with
the upper left corner of the design bounding box we enumerate a grid system (letters on the vertical and numbers on the horizontal).  The traditional grids
are 3mm as used on the Thirkell position finder.  This tool allows one to use different sizes of grids.  When invoked it looks for a design ROI.  If one is
found, then it is used.  Otherwise the user is prompted to create one (it will be placed in the ROI manager for the user for future use).  Like most PhilaJ
overlays things like the fonts and colors may be adjusted.
x
#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-overlay-posFinder.gif][file:PhilaJ-overlay-posFinder.gif]]

This tool is started via the [[#pos-finder][=Position Finder=]] or [[#pos-finder][=Position Finder Options=]] menu selections with the second option showing
an options dialog before drawing the overlay:

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-posFinder-Options.gif][file:PhilaJ-dialog-posFinder-Options.gif]]

Like many PhilaJ overlays, this one may be interacted with via the [[#tool-set-buttons-interact][=PhilaJ Overlay Interaction Tool=]].  If the image is clicked
on, then the coordinates of the point clicked will be added to the measurement results window.  If an ROI is defined, and the [[#overlay-measure][=Overlay/ROI
Measure=]] command is used, via the uppercase [[#keybindings][=[M]=]] key, then the ROI will be measured and an extra column will be added to the results for the
position finder coordinates.  In the following image, the first measurement result line is for a clicked pint and the second is for the highlighted ROI.

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-overlay-posFinderPtROI.gif][file:PhilaJ-overlay-posFinderPtROI.gif]]

I find this tool most useful when referring to literature that uses the Thirkell position finder.  For practical plate flaw locations, I tend to use the
[[#coord-tool][=Coordinate Tool=]] more useful.
*** Measuring Edges
:PROPERTIES:
:CUSTOM_ID: measure-edges
:END:

We are frequently concerned with parallel edges like the straight edges of a coil stamp, paper edges of a souvenir sheet, or rows of perforations.  PhilaJ
provides a generic tool to measure the angle and distance between arbitrary edges in the [[#measure-edges][=Angle & Distance Between Edges=]] menu item.
This tool will prompt the user to make two line selections, and then report some statistics in a popup:

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-meas-edges.gif][file:PhilaJ-meas-edges.gif]]

It also provides a more specialized tool for US coil stamps in the [[#measure-edges][=Coil Edge Check=]] menu item.  This tool will make use of ROIs stored in
the ROI Manager with names like =coilEdgeB=, =coilEdgeL=, =coilEdgeR=, and =coilEdgeT=.  If no ROIs are found, then the user will be prompted to make line
selections, and the tool will save off these selections in the ROI Manager with appropriate names.  When ROIs are specified, a final report is displayed in a
pop up and the edges used are highlighted on the image.

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-meas-coil.gif][file:PhilaJ-meas-coil.gif]]
*** Grill Tool
:PROPERTIES:
:CUSTOM_ID: grill-tool
:END:

The [[#grill-tool][=Grill=]] menu option is used to draw a template of a grill over a stamp image -- so one may compare the grill marks on a stamp with a
template of the suspected grill type.  When the grill tool starts up it looks in the ROI manager for an ROI named "=grill=" or "=grillPts=".  If one is found,
then it is used to place the grill template over the stamp image.  If none are found, then the user will be prompted to draw a rectangle around the grill --
this newly created grill ROI will be placed in the ROI manager.

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-overlay-grill.gif][file:PhilaJ-overlay-grill.gif]]

I find it easier to identify a handful of grill points on the edges of a grill than to identify the grill boundary sometimes. The intent is that the "=grill="
ROI be a rectangle outline of the grill, while the "=grillPts=" ROI is a multi-point ROI identifying grill points.

When invoked via the "=Grill=" menu selection, the overlay is immediately drawn using the previous, or default settings.  By default an "E" grill is drawn with
17 vertical points.  This may be changed by using the [[#grill-tool][=Grill Type & Options=]] menu selection to start the tool.  This selection will first
show a grill type selection dialog:

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-grill-Type.gif][file:PhilaJ-dialog-grill-Type.gif]]

This dialog will be followed by the grill options dialog, the same dialog you get when you use the [[#grill-tool][=Grill Options=]] menu selection:

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-grill-Options.gif][file:PhilaJ-dialog-grill-Options.gif]]

It is typical to toggle through a grill or two in order to find the one that fits best.  Note the options dialog contains the usual customization options like
line color and width, but it also contains several options regarding what parts of the grill template are drawn.  For difficult grills it is worth playing
around with these options.

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-grill-Options2.gif][file:PhilaJ-dialog-grill-Options2.gif]]

The [[#tool-set-buttons-interact][=PhilaJ Overlay Interaction Tool=]] allows one to drag the grill template around on the screen, but you must update the
"=grill=" or "=grillPts=" ROI to make the grill appear in the new location for future invocations of the grill tool.  This may be easily done via the
[[#overlay-measure][=Overlay/ROI Measure=]] command, bound to uppercase [[#keybindings][=[M]=]] -- this will create/update an ROI named "=grill=" in the ROI
manager with the current grill outline.  This is also a handy way to convert a "=grillPts=" ROI into a rectangular "=grill=" ROI.

*** Seporateing Images of Multiples into Image Stacks
:PROPERTIES:
:CUSTOM_ID: sep-block
:END:

The [[#sep-block][=Separate stamp multiple=]] menu option breaks up images of stamp blocks into stacks of individual images.  When activated the following
dialog will appear:

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-sheetSep-Options.gif][file:PhilaJ-dialog-sheetSep-Options.gif]]

The first two requested numbers define the block size, and are used later by PhilaJ to separate the sheet into stamps.  The second two values
are used to label the stamp images with the position number from the original sheet from which the block came:
 - The *sheet* position of the upper left stamp -- if you don't know, then set it to "=-1=".
 - The width of the *sheet* from which the block came -- if you don't know, then leave it as is.
In the example here, we have a 7x2 block taken from the lower left corner of a 10x10 sheet.  Thus the upper left stamp in our block was position 81 in the
original sheet.  If you don't know what values to use for sheet position, set the first to "=-1=" -- this will number the stamps consecutively starting
at 1. Using "=-1=" also causes a subtle change in the resulting slice names in that they will be simple numbers instead of being prefixed by "p" -- this is
related to recommended =SID= values documented in the section [[#roi-name-components][About ROI Name Components]].  The remaining options are used to specify
how the image overlay will look -- in this case we have selected pretty wide lines (so I can include nice screenshots), red division lines & text, and green
for the "block ROI" discussed next).

After the dialog, the tool will ask the user to define a "block ROI".  This ROI should define the outer edge of where we would cut the stamps (see image
below).

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-sheetSplitROI.gif][file:PhilaJ-sheetSplitROI.gif]]

The tool will then split the block into stamp sized rectangles with boundaries between stamps.  Sometimes these boundaries miss because the original ROI was
improperly positioned.  For this reason, the tool will ask the user if the cut lines are acceptable.  If they are not, then the user is requested to adjust
the block ROI.  This process repeats until the user accepts the cut lines.  Then the tool will extract an image for each stamp, and place them all in a single
ImageJ image stack.  Here is what a good set of cut lines look like:

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-sheetSplitResult.gif][file:PhilaJ-sheetSplitResult.gif]]

Note that this final block ROI will be saved in the ROI manager with the name "=multipleOuterSep=".

One of the best ways to spot plate flaws is to "align" these stamp images, and then flip through the images in the stack allowing the natural ability of the
human eye to notice changes.  How do we align the images in the stack?  I find it useful to first crop the images so that we just have the designs -- no
perforations.  Do that by making a rectangular ROI, and then use the "=Image -> crop=" menu option.  In the image processing field, the problem of aligning
images is called "image registration".  Because this is a very common problem in many fields, ImageJ has several plugins available for the task.  For stamps,
I have found "=plugins -> Registration -> linear stack alignment with SIFT=" to work very well.

*** Bulk Create Design ROIs for Multiples
:PROPERTIES:
:CUSTOM_ID: block-d-roi
:END:

The [[#block-d-roi][=Make Design ROIs for Multiple=]] menu option is designed to partly automate the creation of design ROIs for multiples.  The resulting
ROIs usually need to be individually adjusted, but this is much less work than creating each ROI from scratch. In practice it works much like the
[[#sep-block][=Separate stamp multiple=]] tool.  When The [[#block-d-roi][=Make Design ROIs for Multiple=]] menu option is selected, the user is presented
with a dialog box:

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-bultDroi-Options.gif][file:PhilaJ-dialog-bultDroi-Options.gif]]

For the most part, this dialog like the [[#sep-block][=Separate stamp multiple=]] tool. The use of "=-1=" for the sheet position will cause the resulting ROI
names to be "=design_#= instead of "=design_p#=" -- i.e. the =SID= won't be prefixed by a "=p=".  This is related to recommended =SID= values documented in
the section [[#roi-name-components][About ROI Name Components]].

After the dialog box, the tool will ask the user to identify the upper left stamp design like so:

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-bultDroi-LU.gif][file:PhilaJ-bultDroi-LU.gif]]

Next the tool will ask the user to identify the lower right stamp design like so:

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-bultDroi-RL.gif][file:PhilaJ-bultDroi-RL.gif]]

The generated design ROIs will then be displayed, and the user will be ask if the ROIs should be saved in the ROI manager:

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-bultDroi-res.gif][file:PhilaJ-bultDroi-res.gif]]

If the user instructs PhilaJ to save the ROIs, then ROIs will be created and saved in the ROI manager:

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-bultDroi-ROIs.gif][file:PhilaJ-bultDroi-ROIs.gif]]

*** Image Rotation
:PROPERTIES:
:CUSTOM_ID: phil-rotate
:END:

The [[#phil-rotate][=Rotate Line to Horizontal=]] menu option rotates an image so that the current line ROI will be horizontal.  That is to say, draw a line
on something that should be horizontal in the image (frame line, row of perforations, paper edge, etc..), and use this function to rotate the image.  This
menu function is also bound to the [[#keybindings][=[1]=]] key.

The [[#phil-rotate][=Rotate 90 Degrees Right=]] menu option's function is pretty much obvious.  It is also bound to the [[#keybindings][=[2]=]] key.

Both of these rotation commands will clear the current overlay.  To redraw it, hit the [[#keybindings][=[g]=]] key.

Note that image rotation can make future linear measurements impossible.
Please read the section [[#capture-and-scale][Capturing and adjusting properly scaled images]].

*** Making Images From Selections
:PROPERTIES:
:CUSTOM_ID: sub-image
:END:

ImageJ is perfectly capable of creating new images from a selection with "=duplicate=" command (bound to the "=d=" key). When run with an existing ROI, the
"=duplicate=" command essentially performs three steps: 1) "=Edit -> Selection -> To Bounding Box=", 2) "=Edit -> Copy=", 3) "=File -> New -> Internal
Clipboard=".  PhilaJ provides two ways to do something similar.

The first is [[#sub-image][=Selection to image (with scale)=]] which creates a new image from the current ROI's bounding box, *and* then copies the source
image scale to the new image (if the source had one).  The second is [[#sub-image][=Selection to JPEG=]], also bound to the uppercase =[J]= key. This one is a
bit more specialized.  It is intended to immediately save a JPEG of the new image to disk leaving no new image open in ImageJ.

Both  [[#sub-image][=Selection to image (with scale)=]] and  [[#sub-image][=Selection to JPEG=]] use the same underlying system to create a name for
the new image.  The name may contain several components:

  - The base name for the source image
  - Coordinates of the bounding box (upper left-hand corner) in pixels, physical units (millimeters), or Thirkell notation.
  - Size (width, height, or both) of the bounding box in pixels or physical units.
  - =SID= for the ROI.
  - Name of the ROI.

What gets included is controlled by the dialog:

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-dialog-selectionToJPG.gif][file:PhilaJ-dialog-selectionToJPG.gif]]

Note the options available in the "=Additional Image Name Annotation=" section will dynamically vary depending on the situation.  For example if the image has
no scale, then the options for "=Pixel Coordinates=" & "=Thirkell=" won't be available.  In a similar way the options "=ROI Name=" & "=ROI SID=" will not be
shown if the ROI has no name.  Also note the defaults for some options can be set by the calling method.  For example, when called from the
[[#coord-tool][=Coordinate Tool=]] the default value for the "=Include width & height in coordinates?=" option will be unchecked.  As another example, the
primary difference between the [[#sub-image][=Selection to image (with scale)=]] and [[#sub-image][=Selection to JPEG=]] is the default value for the
"=Automatic Save Actions=" option.

Note both [[#sub-image][=Selection to image (with scale)=]] and [[#sub-image][=Selection to JPEG=]] behave differently if called while the
[[#pos-finder][=Position Finder=]] or [[#coord-tool][=Coordinate Tool=]] overlays are active.  In this case the coordinates are relative to the origin of the
coordinate system.

*** Create Preview & Thumbnail Images
:PROPERTIES:
:CUSTOM_ID: make-preview
:END:

The [[#make-preview][=Create Preview & Thumbnail Images=]] menu option creates smaller copies of an image for use in web pages.  This is the saem operation
preformed by the [[#bulk-processing][=Process a directory of scans=]] menu otpoin, but broken out for ad-hoc use.

*** Overlay/ROI Measure
:PROPERTIES:
:CUSTOM_ID: overlay-measure
:END:

The menu item [[#overlay-measure][=Overlay/ROI Measure=]], also bound to the uppercase [[#keybindings][=[M]=]] key, is intended to largely replace and extend the
behavior of the built in "=Measure=" function bound to the lowercase =[m]= key.

[[#overlay-measure][=Overlay/ROI Measure=]] preforms a sequence of actions.  First it saves the measured ROI in the ROI Manager with a name of
"=philMeasured=" -- if an ROI already exists with that name, then it will be removed first.  Next it calls the built in "=Measure=" function -- note the name
of the ROI when measured will be the name the ROI had when [[#overlay-measure][=Overlay/ROI Measure=]] was called -- *not* "=philMeasured=".  Lastly
[[#overlay-measure][=Overlay/ROI Measure=]] will preform an overlay specific action for the following overlays:

 - [[#dynamic-perf-gauge][=Dynamic Perforation Gauge=]]
 - [[#pos-finder][=Position Finder=]]
 - [[#grill-tool][=Grill=]]
*** Measuring ROI Offsets
:PROPERTIES:
:CUSTOM_ID: measure-offset
:END:

ROI offsets are closely related to centering, but are more about things that should be in a particular place but are not.  For example, if a press comes down
on a sheet twice in a perfect world, it would hit the same place.  But when they don't we can see two impressions with one offset from the other. As an
example, consider the following image.  The popup in the middle is what you get when you use the [[#measure-offset][=Offset Between ROIs=]] tool, and select
the two deign frames.

#+ATTR_HTML: :align center :width 800px
[[file:PhilaJ-meas-offset.gif][file:PhilaJ-meas-offset.gif]]

Note the offsets are measured in terms of the distance between the upper left of each ROI's [[#bb-hr-roi][bounding box]].

*** PhilaJ Image Load & Save
:PROPERTIES:
:CUSTOM_ID: load-save-magic
:END:

The PhilaJ [[#load-save-magic][=Load image & ROI sidecar.  Attempt to set Scale.=]] menu option, also bound to lowercase [[#keybindings][=[o]=]], cause a
sequence of actions: first an image is loaded, then ROIs are loaded via [[#roi-sidecars][=Load ROIs from PhilaJ sidecar file=]], and then PhilaJ attempts
to set the image scale using the following sequence of steps (stopping when one of them works):

   - If ImageJ set the scale automatically, then PhilaJ will attempt to covert the scale to millimeters
     via [[#set-scale-convert][=Convert image scale units to mm=]].  This most commonly occurs when ImageJ uses an embedded TIFF DPI tag
     created automatically by a document scanner.
   - Next it attempts to use [[#set-scale-filename][=Set scale from DPI file name=]]
   - Next it attempts to use [[#scale-roi][=Set scale from scale ROI=]]
   - Lastly it will attempt to use [[#scale-rpi][=Set Scale for Stereo Microscope Photograph=]] if the image is located in the RPI image directory (normally
     "=$HOME/Pictures/pi-cam=").

The PhilaJ [[#load-save-magic][=Save image & ROI sidecar=]] menu option, also bound to lowercase [[#keybindings][=[s]=]], saves the file, and an
[[#roi-sidecars][ROI sidecar file]] if the ROI manager is non-empty.  Note that PhilaJ always saves a file as a =PNG= or =TIFF= file -- a =PNG= if the file is
a simple image with one slice and a =TIFF= otherwise.

The [[#load-save-magic][=SaveAs image & ROI sidecar=]], bound to uppercase [[#keybindings][=[S]=]], is similar except it allows the user the change the
filename first.

*** ROI Sidecars
:PROPERTIES:
:CUSTOM_ID: roi-sidecars
:END:

PhilaJ associates a "sidecar" file containing ROIs with each image file.  Essentially PhilaJ expects to find ROIs associated with an image file saved off in
another file of the same name and an extension of "=.roi.zip=".  For example, if your image file was named "=foo.png=", then the sidecar would be named
"=foo.roi.zip=".

We can save and load sidecar files for the currently active image with the menu options [[#roi-sidecars][=Load ROIs from PhilaJ sidecar file=]] &
[[#roi-sidecars][=Save ROIs to PhilaJ ROI sidecar file=]]..

*** Note Sidecars
:PROPERTIES:
:CUSTOM_ID: note-sidecars
:END:

Similar to [[#roi-sidecars][=ROI Sidecars=]], PhilaJ can load a text file associated with an image via the [[#note-sidecars][=Load Notes from PhilaJ sidecar
file=]] menu entry.

Note sidecars are not as integrated into PhilaJ as are [[#roi-sidecars][=ROI Sidecars=]].  These files are not automatically loaded by
[[#load-save-magic][=Load image & ROI sidecar.  Attempt to set Scale.=]].  They are also not automatically saved by [[#load-save-magic][=Save image & ROI
sidecar=]] or [[#load-save-magic][=SaveAs image & ROI sidecar=]].  Finally, they are not automatically renamed when the image is renamed.

*** Convert image scale units to mm
:PROPERTIES:
:CUSTOM_ID: set-scale-convert
:END:

The [[#set-scale-convert][=Convert image scale units to mm=]] menu option attempts to convert the current image scale units to millimeters for PhilaJ. For
example, if an image scale was specified in DPI via an embedded TIFF tag, this will convert it to millimeters.  It only knows about the most commonly used
length units in philately:

  - mils -- thousandths of an inch
  - inches
  - centimeters
  - meters
  - micrometers

*** Image Resize To Scale
:PROPERTIES:
:CUSTOM_ID: scale-image-scale
:END:

PhilaJ has two tools that can resize an image with the end goal of changing the image scale.  In both cases, an image with different horizontal & vertical
scales will be resized so that the pixels are as square as possible.  The difference is in *how* the resize is preformed.

The first menu option is [[#scale-image-scale][=Shrink image to make pixels square=]].  This command only shrinks the image, and then only horizontally or
vertically -- not both.  The second option is [[#scale-image-scale][=Resize image to target DPI=]].  This one resizes the image to hit a target DPI.  In doing
so it might shrink or grow the image, and it might resize both horizontally & vertically.  The first option minimizes both distortion and data loss.  It is
the best choice for precision measurement.  The second option is more useful when resizing an image so that it may be printed/published at a desired
size.

It is important to make pixels square before an image is rotated.  Failure to do so will make future linear measurements impossible. Please read the section
[[#capture-and-scale][Capturing and adjusting properly scaled images]].

*** Scale ROIs
:PROPERTIES:
:CUSTOM_ID: scale-roi
:END:

PhilaJ contains two commands that work directly with a special ROI to set or save image scale:

   - [[#scale-roi][=Set scale from scale ROI=]]
   - [[#scale-roi][=Create scale ROI and add it to the ROI manager=]]

While these can be called via the scale menu, the first is automatically called when using the PhilaJ file open command (The [[#keybindings][=[o]=]] key).

Scale ROIs have a special format for the name: "=scale_<NUMBER>mm="

If the scale ROI is a line, then "=NUMBER=" is its length in millimeters.  If it is a rectangle ROI, then "=NUMBER=" is its width in millimeters.

When the scale ROI is a line, then image pixels are assumed to be square.  When it is a rectangle, the height of the rectangle is used to set
the pixel aspect ratio.

PhilaJ can *create* a rectangular ROI for a scaled image and place that ROI in the ROI manager.  PhilaJ will *always* create rectangular scale ROIs even when
the pixel aspect ratio is 1.

*** Alternate interfaces to the ImageJ set scale command
:PROPERTIES:
:CUSTOM_ID: scale-alt
:END:

The built in ImageJ set scale dialog may be accessed via the PhilaJ scale menu using the option [[#scale-alt][=Set Scale via standard ImageJ dialog=]].  In
addition, this menu provides four other interfaces to the same command that might be more directly useful for stamp images.

   - [[#scale-alt][=Set Scale 1D=]] \\
     This menu option provides a simple way to enter known distances in pixels and millimeters, and sets the scale.  The distance in pixels can be
     prepopulated from the distance of a line ROI if one is active when the menu is selected.  This is much like the built in scale command, but forces the
     use of millimeters.
   - [[#scale-alt][=Set Scale 1D from measurement results table=]] \\
     This menu option works just like the previous except it takes the distance in pixels from the last measured value in the measurement results table.
   - [[#scale-alt][=Set Scale 2D=]] \\
     This menu option provides a more direct way to set the scale for an image with different horizontal & vertical scales.  Instead of asking for a scale
     ratio like the built in command, it requests known distances in pixels & millimeters in both the horizontal and vertical direction.  This is usually a
     simpler for philatelic work because we are using 1) a scanner with known horizontal & vertical DPI, or 2) we are using a right angle measurement scale in
     the photographic field.
   - [[#scale-alt][=Set Scale 2D from measurement results table=]] \\
     This menu option works just like the previous, but it takes both the horizontal (measurement #1) & vertical (measurement #2) distance distance in pixels
     from the last two measurements in the measurement results table.  When using a right angle measurement scale, the typical procedure is to draw the
     vertical scale ROI, hit [[#keybindings][=[m]=]], draw the horizontal scale ROI, hit [[#keybindings][=[m]=]], and then invoke this function.

Note the default distance in millimeters for all of these options is $50\,\mathrm{mm}$ because I use $50\,\mathrm{mm}$ glass scales graduated to
$\frac{1}{10}\,\mathrm{mm}$ for both my scanner and microscope.

*** Set scale via DPI
:PROPERTIES:
:CUSTOM_ID: set-scale-dpi
:END:

The [[#set-scale-dpi][=Set scale for DPI=]] allows the user to set the image scale directly via a DPI value.  This value is converted into millimeters
automatically.  Modern scanners frequently have different DPIs horizontally & vertically, and that is where the [[#set-scale-dpi][=Set Scale for Hoiz & Vert
DPI=]] menu option comes in.

Lastly, several common DPIs may be set via a handful of options at the top of the scale menu:

 - [[#set-scale-dpi][=Set scale for DPI: 2410x2398=]]   -- This odd DPI is what I get at the center of the platen on my Epson scanner. ;)
 - [[#set-scale-dpi][=Set scale for DPI: 2400=]]
 - [[#set-scale-dpi][=Set scale for DPI: 1200=]]
 - [[#set-scale-dpi][=Set scale for DPI: 600=]]
 - [[#set-scale-dpi][=Set scale for DPI: 300=]]

*** Set scale from DPI file name
:PROPERTIES:
:CUSTOM_ID: set-scale-filename
:END:

The [[#set-scale-filename][=Set scale from DPI file name=]] menu option extracts DPI information encoded in the filename of the current image.  This is
probably best explained via examples:

 - "=foo_2400dpi.jpg=" -- Set the DPI to 2400
 - "=foo_2400.123dpi.jpg=" -- Set the DPI to 2400.123 (that is to say, the DPI need not be a whole number)
 - "=foo_2300vdpi_2500hdpi.jpg=" -- Set the *vertical* DPI to 2300 and the *horizontal* DPI to 2500.

When loaded via the PhilaJ [[#load-save-magic][=Load image & ROI sidecar.  Attempt to set Scale.=]] command, a DPI encoded in a filename like this will
automatically be used to set the image scale.  Thus this command is most useful when an image has been loaded in another way -- like via the "=file -> open="
command in the main ImageJ menu.

*** Philatelic Data
:PROPERTIES:
:CUSTOM_ID: phil-data
:END:

Some of the data PhilaJ houses for doing computations can come in handy for the humans using the tool.

The [[#phil-data][=Kiusalas Table=]] menu item will display a table of US Kiusalas values, the value reported in the Scott Catalog, and the standard
perforation measurement to four digits.

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-data-usKSP.gif][file:PhilaJ-data-usKSP.gif]]

The [[#phil-data][=Grill Table=]] menu item will display a table of US grill characteristics.

#+ATTR_HTML: :align center :width 800
[[file:PhilaJ-data-usGrills.gif][file:PhilaJ-data-usGrills.gif]]

*** Measure Color
:PROPERTIES:
:CUSTOM_ID: measure-color
:END:

The [[#measure-color][=Measure Color=]] menu option is used to produce a report regarding the colors of the currently selected pixels.  The traditional
Red/Blue/Green scheme of describing digital colors is *not* used by PhilaJ.  Instead the [[https://en.wikipedia.org/wiki/CIELAB_color_space][CIELAB color
space]] is used for all PhilaJ color computations and reporting.  With CIELAB colors are described via three quantize: $L$, $A$, & $B$.  In addition, two
useful quantities may be computed from these: $C$ & $H$.  The most important quantity is $H$, known as the Hue angle, as it is a good, single number
representing the "shade" of a color.  I have been pretty successful using this number to identify some difficult stamp shade varieties.  

When activated, [[#measure-color][=Measure Color=]] menu option can produce reports in two windows:
  - A statistical summary of the colors (max, min, mean, and standard deviation for all five variables: $L$, $A$, $B$, $C$ & $H$)
  - A histogram of the $H$ channel.  

The report windows will include the name of the ROI measured!

If the menu option is used on another selection or with another image, then new histogram and statistics windows will be created allowing the user to compare
colors.  Note the [[#measure-color][=Compare Two Colors=]] menu option provides some automation and additional computation for comparing colors.

# TODO: Add example reports and an image of a color-sample region.  Add dialog.

*** Philatelic Unit Conversions
:PROPERTIES:
:CUSTOM_ID: phil-units
:END:

PhilaJ can convert a few units philatelists frequently encounter.  Perforations may be converted between "hole gap in thousandths of an inch" (i.e. Kiusalas)
and "holes per 2cm" (i.e. what is in most catalogs) via:

   - [[#phil-units][=Convert Kiusalas to Perforations per 2cm=]]
   - [[#phil-units][=Convert Perforations per 2cm to Kiusalas=]]

These functions pop up a dialog box asking the user to enter the value to convert, and then pop up a window with the answer.

Much of PhilaJ's functionality is centered around linear distances measured in millimeters; however, sometimes we get values in other units.  The
[[#phil-units][=Convert length to millimeters=]] menu item allows one to convert various other units to millimeters.

Lastly the [[#phil-units][=Convert Distance to Perforation Measurement=]] menu item "converts" distance into "holes per 2cm".  This isn't really a straight up
unit conversion like the other commands documented in this section; however, I include it in the menu because some older catalogs measure perforations as a
count over a distance other than 2cm.  The idea is that you have $N$ perforation holes, and measure the distance from center to center (or edge to edge) for
the holes, then you can compute the perforation value in standard units.  Like the previous functions, this one will pop up a dialog box asking for distance
and hole count.  If you have an active line ROI when the menu is selected, then the length of the line will be used to prepopulate the distance value.  If
that line ROI happens to be one that was previously created by the [[#dynamic-perf-gauge][=Dynamic Perforation Gauge=]], then the number of holes will also be
prepopulated.  The results window provides standard perforation and Kiusalas units.

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-compute-d2p.gif][file:PhilaJ-compute-d2p.gif]]

*** Scale Report
:PROPERTIES:
:CUSTOM_ID: scale-report
:END:

The [[#scale-report][=Scale Report=]] menu option produces a short report in a popup regarding the current image scale.  This is a handy report because it
bridges the gap between the various ways image scales are usually reported.  Many times a US philatelist will be working in DPI while a colleague in the EU
may be working in PPMM.  Another common scenario is having some images captured via a digital video camera or microscope camera where scale is frequently
expressed as pixel size in $\mu\mathrm{m}$ and other images of the same specimen from a document scanner calibrated in DPI.

#+ATTR_HTML: :align center :width 400
[[file:PhilaJ-scale-report.gif][file:PhilaJ-scale-report.gif]]

*** Bulk Processing Images
:PROPERTIES:
:CUSTOM_ID: bulk-processing
:END:

Philatelists frequently have a great many scans or captures to deal with.  Be it a marathon album scanning session or a detailed analysis of a single,
valuable specimen.

PhilaJ provides a semi-automated method to scale for square pixels, rotate, crop, save, and create a thumbnail file.  I say semi-automated in that as PhilaJ
processes each image the end user is required to draw a line for a rotation to horizontal and draw a rectangle for the final crop.  This routine is accessed
via the [[#bulk-processing][=Process a directory of scans=]] menu option.

Note: Other software can do this stuff in a fully, or almost fully, automated way.  The only issue with these fully automated solutions is that most of them do
not make image size adjustments to square the pixels before they rotate the images into alignment (See the section [[#capture-and-scale][Capturing and
adjusting properly scaled images]] for more).  That said, if you are just doing a bulk album scan, then these tools are well worth the time to acquire and learn
how to use.

*** Stamp Crop
:PROPERTIES:
:CUSTOM_ID: stamp-crop
:END:

The [[#stamp-crop][=Stamp Crop w/ Previous Settings=]] & [[#stamp-crop][=Stamp Crop w/ New Settings=]] menu items assist in making more uniform, and
repeatable image crops.  The system is driven by a user extensible set of "crop rules" that define the way an image is cropped under user control.  Most of
this is best described in the comments in the configuration file:

#+INCLUDE: "dot-philaj/stampCropRules.csv" src txt

The configuration file is called "=stampCropRules.csv=", and is located in the [[#config-files][PhilaJ Configuration Directory]].  If the file is missing,
then the crop tool will only have the "=rectangle=" and "=Rectangle + 1mm margins=" rules available.

*** Create ROI Annotated Image
:PROPERTIES:
:CUSTOM_ID: make-roianno-preview
:END:

The [[#make-roianno-preview][=Create ROI Annotated Image=]] menu item will create an image with each ROI drawn -- right now plate flaw and fault
ROIs are supported.  This is accomplished by searching the ROI Manager for ROIs with names staring with "=pflaw=", adding them to the overlay, and then
flattening the image.  Some effort is made to intelligently place the string "=_pflaws=" in the new image title to make saving the image less annoying.  Note
that plate flaw ROIs may be created manually or with the assistance of the [[#coord-tool][=Coordinate Tool=]].  Note that if you intend use
[[#make-preview][=Create Preview & Thumbnail Images=]] on the resulting image, it is best to set the line width high enough that the ROIs are still visible
when shrunk down to thumbnail size.

# TODO: Add an example image!!

*** Cleanup Windows and Files
:PROPERTIES:
:CUSTOM_ID: cleaning-up-windows-n-files
:END:

PhilaJ can pop up quite a few windows, and when loading a new image most of those windows won't be helpful.  Closing all those windows by clicking on the
close buttons is a pain, so PhilaJ provides a few helpful menu items:

   - [[#cleaning-up-windows-n-files][=Close PhilaJ Windows=]]
   - [[#cleaning-up-windows-n-files][=Close PhilaJ & Related Windows=]]
   - [[#cleaning-up-windows-n-files][=Close Image, PhilaJ, & Related Windows=]]

Frequently we don't just want to close the windows, we want to also *delete the image file* at the same time.  This is very common with microscope images
that we snapped for a quick analysis.  In these cases, the following menu options may be useful:

   - [[#cleaning-up-windows-n-files][=Delete current image file=]]
   - [[#cleaning-up-windows-n-files][=Delete current image file & close image window=]]
   - [[#cleaning-up-windows-n-files][=Delete current image file & close associated windows=]]

*** Bulk ROI Rename
:PROPERTIES:
:CUSTOM_ID: roi-name-tools
:END:

The [[#roi-name-tools][=Bulk ROI Rename=]] menu option is a powerful way to rename ROIs; however, it can can be quite dangerous.  I strongly suggest saving
the ROI Manager contents first.  This tool asks the user for a search and replacement string.  It then replaces every occurrence in the *names* of the ROIs in
the ROI Manager.

*** Cleanup The ROI Manager
:PROPERTIES:
:CUSTOM_ID: roi-cleanup
:END:

The menu option [[#roi-cleanup][=Clean up ROI list=]] preforms several actions:

 - Rename old style ROI names.  Older versions of PhilaJ used different standard ROI names.  This tool transforms the old style names into the new style names.
 - Delete any ROIs with a duplicate name -- leaving just one ROI with any given name.
 - Delete any margin ROI with no associated design & paper ROIs.
 - Delete any BB ROI without a corresponding ROI for which it could be the bounding box
 - Delete "=pfHole=" ROIs without matching "=pfLine=" ROIs
 - Regenerate the "=ALL=" ROI
 - Pop up a window with a report of all the changes.

I suggest saving the ROI Manager contents first.  That way you can undo the cleanup.

** PhilaJ Configuration Files
:PROPERTIES:
:CUSTOM_ID: config-files
:END:

PhilaJ is customized via various configuration files that are all located within the PhilaJ config folder.  This folder is located in your "home directory":

      =~/.philaj/=

The "=~=" means your home directory.  On my windows machine, that expands to "=C:\Users\richmit\.philaj\perfs=".  On Linux and a mac, that expands to
"=/home/richmit/.philaj/perfs=".  Note the "=richmit=" part is my username.

This directory can contain three things:

  - "=perfs="              :: a directory containing [[#custom-spec-gauge][=Custom Specialized Gauges=]].
  - "=stampCropRules.csv=" :: A file containing [[#stamp-crop][Stamp Crop Rules]]
  - "=stampROIRules.csv="  :: A file containing [[#make-stamp-roi][Special Stamp ROI Rules]]

Example configuration files may be found in the PhilaJ distribution inside the "=dot-philaj=" directory.

** Capturing and adjusting properly scaled images
:PROPERTIES:
:CUSTOM_ID: capture-and-scale
:END:

Camera digital image sensors have very stable pixel sizes across the entire frame.  This makes it a simple matter to calculate the theoretical horizontal &
vertical image scales, and gives us some trust in the consistency of scales we directly measure.  Most dedicated microscope cameras have square pixel sensors,
so images will have the same scale horizontally & vertically.  Note I said "theoretical" above.  Lens distortions and improper specimen placement can cause
very serious issues.  We can't do much about lens distortion except try to put our stamps in the optical sweet spot -- usually the center third of the lens.
We can do something about specimen placement.  It is critically important that the stamp and image sensor are parallel to each other.  If not then perspective
distortion will make measurements impossible.  Using a stereo microscope on a microscope base makes this much less difficult because they are mechanically
designed to keep the stage and lenses parallel.  Many digital microscopes are not so designed, and need to be aligned with the surface upon which stamps will
be placed.  One simple way to align them is to take photographs of a something known to be perfectly square (like a quilting grid or photographic target), and
then adjust the microscope until the captured image gives you a perfect square.

While document scanners don't have the complexities of specimen placement to deal with, they do provide unique challenges.  Even if one uses a single
resolution mode, most document scanners don't have quite the same DPI horizontally and vertically.  In fact, many flat bed scanners have some variation in DPI
across the platten.  For example my scanner's DPI horizontally varies about 30 DPI across the platten, but only varies a couple DPI vertically.  Much like
putting a stamp in the sweet spot of a camera lens, I try to always scan stamps in the middle third of my flatbed scanner where the DPI is about 2410x2398.
This isn't much of a difference, but it can become an issue when making fine measurements (perforation hole sizes, perforation gaps, curved vs flat plate
prints, etc...).

When using a document scanner you are almost always forced to deal with images with different horizontal & vertical scales.  If you are unlucky and have
a microscope camera with non-square pixels, then you will need to deal with them too.  Because such images are so common, ImageJ provides direct support for
them.  Unfortunately such images can't be rotated without destroying our ability to make linear measurements.

But I need to rotate my images!  What do I do?

The simplest answer is to adjust the image size so that the pixels become square.  This can be done manually in ImageJ, but PhilaJ provides a couple handy
functions for the task: [[#scale-image-scale][=Shrink image to make pixels square=]] and [[#scale-image-scale][=Resize image to target DPI=]].

** Available Specialist gauges and presets
:PROPERTIES:
:CUSTOM_ID: spec-gauge-list
:END:

 - Updated Kiusalas Perforation Gauge :: I have a high degree of confidence in this gauge, and think I have both the frequency & hole sizes correct. This one
   includeds a row for 72.5.
 - Traditional Kiusalas Perforation :: I have a high degree of confidence in this gauge, and think I have both the frequency & hole sizes correct.
 - Liberty Issue Perforation Gauge :: Right now the gaps are the nearest Kiusalas value, and the hole sizes are based on values from articles.  Unfortunately
   this isn't quite right.  The hole sizes vary a bit between wet vs dry printings and the gaps between the large & small hole varieties is a tiny bit
   different.  So be careful when using it.  I hope to someday make a better gauge based on measurements of my extensive Liberty collection.
 - BARI Wolf Issue Perforation Gauge :: This gauge is based on measurements of my personal collection.  I'm still refining this gauge as I learn more about
   this issue, but the gauge is pretty good at this point.
 - Canadian Kiusalas Perforation Gauge :: The gaps are correct, but the hole diameters on this gauge are completely wrong -- I just set them to 1mm.  If you
   know what they should be, then please contact me!
 - AMG AM Post :: This gauge is based on a *very small* set of measurements of these issues, and needs more work.

** A Note About The Thirkell Position Finder

The [[#pos-finder][=Position Finder=]] tool provides a minimal level of support for the way the Thirkell Position Finder is used by experts (the addition of
negative & fractional grid coordinates, and millimeter coordinate offsets).  Frankly I'm disinclined to extend support beyond the basic because the current
implementation meets most people's needs, and I feel the PhilaJ [[#coord-tool][=Coordinate Tool=]] is a better solution for more complex requirements.

I'm not saying the Thirkell Position Finder has anything wrong with it.  In fact, the Thirkell Position Finder is a marvelous tool for manually documenting
and locating plate flaws.  The frame lines provide an easy way to align the guide, the 3mm grid system provides a good reference for the eye to follow, the mm
scale allows one to gain millimeter accuracy, and the letter axis eliminates errors in notation.  Most of the time a simple coordinate is all you need to
communicate a location except for a couple cases. Consider the following clip from the upper left hand of an AM Post issue.

#+ATTR_HTML: :align center :width 400
file:speckOnEdge.jpg

Note the two plate flaws: 1) In the margin, and 2) on the frame line.  These kinds of flaws require one to be creative in the use of the Thirkell Position
Finder.  These "edge cases", pun intended, are the reasons experts have extended the Thirkell with negative and fractional grids.  That said, most people
avoid the technical stuff and just use phrases like "To the left of position A1", "On the right edge of A1", or "On the grid line between B1 & B2".  While all
of these solutions work perfectly for *humans* communicating to other *humans*, they fall short when trying to document coordinates in a uniform way in
digital form.

Much of the design of the Thirkell Position Finder is about overcoming limitations of human dexterity and visual acuity -- the 3mm guide grid for example.
I think in a world of modern digital image analysis, it is simplest to do away with the Thirkell altogether and simply locate positions using the *signed*
distance to the right and below the upper left corner of the design bounding box.  That is, do precisely what the Thirkell does, but get rid of the visual
guides we no longer need and allow negative numbers. This is the idea behind the [[#coord-tool][=Coordinate Tool=]] in PhilaJ.

** Named ROIs
:PROPERTIES:
:CUSTOM_ID: named-rois
:END:

Note: This entire section can be ignored by most PhilaJ users...

ROIs play a central role in PhilaJ (and in ImageJ in general).  PhilaJ has adopted standard names for several commonly philatelic use cases.

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
| ROI                               | Type      | Description                                             |
|-----------------------------------+-----------+---------------------------------------------------------|
| =coilEdge<B/L/R/T>=               | Line      | Straight edge of a coil stamp                           |
| =design[_<SID>][-<SFX>]=          | Any area  | Design boundaries.                                      |
| =grillPts[_<SID>][-<SFX>]=        | Points    | Identifies grill points                                 |
| =grill[_<SID>][-<SFX>]=           | Rectangle | Grill boundaries.                                       |
| =idFact[_<SID>][-<SFX>]=          | Any       | Identifying factors -- like a plate artifact            |
| =margin<B/L/R/T>[_<SID>][-<SFX>]= | Rectangle | Bottom/Left/Right/Top stamp margin                      |
| =outside_edges=                   | Any Area  | Outer paper boundaries                                  |
| =overprint[_<SID>][-<SFX>]=       | Any area  | Overlay                                                 |
| =paper[_<SID>]=                   | Any area  | Paper boundaries inside perforations.                   |
| =pfHole<NN><MM>_<SFX>=            | Circle    | Perforation hole associated with =pfLine<NN>_<SFX>=.    |
| =pfLine<NN>_<SFX>=                | Line      | Line of perforations.  =<NN>= is the perforation count. |
| =pmark[_<SID>][-<SFX>]=           | Any area  | Postmark                                                |
| =pn_<N>=                          | Rectangle | Rectangle bounding the plate number                     |
| =scale_<X>mm=                     | Rectangle | Used to set image scale (=<X>= is the scale)            |
| =multipleOuterSep=                | Rectangle | Multiple outer separation boundary                      |
| =stampBdry[_<SID>]=               | Any Area  | Outer paper boundaries of a single stamp                |
| =wmark[_<SID>][-<SFX>]=           | Any area  | Watermarks                                              |
| =pflaw[_<SID>][-<SFX>]=           | Any       | Plate flaw locations                                    |
| =pfflawBx[<X><Y>][<W><H>][_SID]=  | Rectangle | Plate flaw Boxes created by coordinate tool.            |
| =pflawPt[<X><Y>][_SID]=           | Point     | Plate flaw Points created by coordinate tool.           |
| =fault[_<SID>][-<SFX>]=           | Any       | Fault locations                                         |
| =fault[<X><Y>][<W><H>][_SID]=     | Rectangle | Fault location Boxes created by coordinate tool.        |
| =fault[<X><Y>][_SID]=             | Point     | Fault location Points created by coordinate tool.       |
| =mmcBx[<X><Y>][<W><H>][_SID]=     | Rectangle | Boxes created by coordinate tool.                       |
| =mmcPt[<X><Y>][_SID]=             | Point     | Points created by coordinate tool.                      |
|-----------------------------------+-----------+---------------------------------------------------------|

*** Notation

  - Items in square brackets *are not* required, but items in angle brackets *are* required.
    - Example 1: =pfLine<NN>_<SFX>=
      - GOOD: =pfLine12_foo=
      - BAD:  =pfLine_foo=, =pfLine12=, & =pfLine=
    - Example 2: =design[_<SID>][-<SFX>]=
      - GOOD: =design_foo-bar=, =design_foo=, =design-bar=, =design=
      - BAD: =design_= -- i.e. if you have the "=_=" you must have the "=SID=" too!
  - Items separated by hashes are mutually exclusive options
    - Example: =coilEdge<B/L/R/T>=
      - GOOD: =coilEdgeB=, =coilEdgeL=, =coilEdgeR=, =coilEdgeT=
      - BAD: =coilEdge= & =coilEdgeBL=

*** About ROI Name Components
:PROPERTIES:
:CUSTOM_ID: roi-name-components
:END:

 - =<B/L/R/T>= - Used to indicate side (Bottom, Left, Right, Top)
 - =<NN>= & =<MM>= - zero padded integers -- i.e. "=01=" but not "=1="
 - =<SID>= - Used to identify the stamp an ROI is associated with.
   - Rules:
     - Should be alphanumeric (letters and numbers)
     - Must not contain a dash ("=-=")
   - Recommendations
     - Sheets & if you know the sheet position: Use =pN= -- the "=p=" is for position, and "=N=" is the number.
     - Blocks: Integers starting with 1 at the upper left and going left to right & top to bottom.
     - For large multiples, zero pad the integer so the SID integers are all the same width and thus sort correctly
     - For pairs use =L= (Left) & =R= (Right) or =T= (Top) & =B= (Bottom)
 - =<SFX>= - Used to differentiate an ROI from others with the same name
   - Rules:
     - Should be alphanumeric (letters and numbers)
   - Examples
     - "=design_1-center=" & "=design_1-frame=" might be use for a classic, bi-color US stamp
     - "=design_1-A=" & "=design_1-B=" might be use for a stamp with a double impression

*** Some Component Recommendations

 - For perforation ROIs (=pfHole<NN><MM>_<SFX>= & =pfLine<NN>_<SFX>=)
   - For single stamps I normally use: =T (Top)=, =B= (Bottom), =L= (Left), & =R= (Right) for the =PFX=
   - For vertical coils: =T= (Top), =B= (Bottom), =C= (=C= center)
   - For horizontal coils: =L= (Left), =R= (Right), =C= (=C= center)
   - For horizontal strips: =T= (Top), =B= (Bottom), =R1= (Row 1), etc...
   - For vertical strips: =L= (Left), =R= (Right), =R1= (Column 1), etc...
   - For blocks/sheets: =R1= (Row 1), =C1= (Column 1), etc...
 - =pt_<TAG>_<N>=
   - For grill points set the =TAG= to =grill=.
   - For design coordinates use =d= or =design=.  For multiples use =design_<SID>= -- i.e. the design ROI for each stamp.
   - For imperf souvenir sheets use =edges=

*** About "=HR=" & "=BB=" ROIs
:PROPERTIES:
:CUSTOM_ID: bb-hr-roi
:END:

  - In image processing, a "bounding box" is the smallest rectangle with sides parallel to the image edges that contains some object
  - Most ROIs can be associated with a bounding box ROI with a "=BB=" in the name.
  - Most  "=BB=" ROIs are created by automatic computations (centering or grill measurements for example)
  - Examples:
    - "=designBB_top-frame=" is a bounding box associated with the design ROI "=design_top-frame="
    - "=overlayBB_1=" is a bounding box associated with the design ROI "=overlay_1="
  - =HR= ROIs are "Horizontal Reference" lines
    - In image processing, a "horizontal reference" is a line that indicates the natural horizontal of an artifact
    - These are not necessarily associated with another ROI, but they can be
    - Most =HR= ROIs are manually created by the end user instead of by automatic computations
    - Examples:
      - An text overprint might not be quite level.  If the overprint is identified by an ROI named "=overprint_UL-red=", then the horizontal reference ROI
        would be named "=overprintHR_UL-red=".
      - Note that an associated ROI need not exist -- i.e. the "=overprint_UL-red=" ROI in the previous example isn't strictly necessary.

*** How ROIs are Used

 - Some macros will look in the ROI manager for specific ROI names or name patterns, and use them if they are found.
   - =design[_<SID>][-<SFX>]=           - Design & centering measurements
   - =paper[_<SID>]=                    - Paper & centering measurements
   - =grill[_<SID>][-<SFX>]=            - Used to draw grill templates & to measure a grill
   - =grillPts[_<SID>][-<SFX>]=         - Used to draw grill templates & to measure a grill
   - =scale_<X>mm=                      - used to set image scale
 - In addition, some ROIs will be *created* and added to the ROI manager if they are needed and don't already exist.
   - =design=                           - Design & centering measurements
   - =paper=                            - Paper & centering measurements
   - =grill=                            - Used to draw grill templates & to measure a grill
   - =coilEdge<B/L/R/T>=                - Coil edge angle measurements
 - Some macros will construct ROIs and save them in the ROI manager for the user.
   - =designBB[_<SID>][-<SFX>]=         - Design bounding box created by a design measurement or centering report
   - =paperBB[_<SID>]=                  - Paper bounding box created by a paper measurement or centering report
   - =margin<B/L/R/T>[_<SID>][-<SFX>]=  - Rectangular selection for the margins (gap between a design & a paper) created by the centering report
   - =grill[_<SID>][-<SFX>]=            - Constructed from a =grillPts= ROI
   - =scale_<X>mm=                      - Created by the scale ROI maker
   - =pfLine<NN>_<SFX>=                 - The span of a perforated edge created by the dynamic perforation gauge
   - =pfHol[<NN><MM>_<SFX>=             - Marks a perforation hole created by the dynamic perforation gauge
   - =philMeasured=                     - Last ROI measured by my the PhilaJ ROI measure function (=M= key)
 - Some macros will construct ROIs, but *not* place them in the ROI manager
   - =dynPf_<NN>_perfs=                 - Constructed by the dynamic perforation gauge when not using the ROI manager
   - =mmcPt=                         - Constructed by the coordinate tool for measured points
   - =mmcBx=                           - Constructed by the coordinate tool for measured rectangles
   - =mmcBxGuide=                      - Constructed by the coordinate tool -- drawn guides for boxes
   - =mmcPtGuide=                      - Constructed by the coordinate tool -- drawn guides for points
 - Some macros will use the current selection name & update the ROI manager with the current selection:
   - =design[_<SID>][-<SFX>]=           - Design & centering measurements -- =centeringReport()= & =measureDesign()=
   - =paper[_<SID>]=                    - Paper & centering measurements -- =centeringReport()= & =measurePaper()=
   - =grill[_<SID>][-<SFX>]=            - Used to draw grill templates & to measure a grill
   - =grillPts[_<SID>][-<SFX>]=         - Used to draw grill templates
 - Some macros will use the current selection name & extract extra data for computations
   - =<PFX>_<NN>_perfs=                 - Used by =computePerfsFromDistance()= & =drawDynPfOnLine()=
 - Some ROIs are not currently used by any macro
   - =pf_<SFX>=
   - =fault_<SFX>=
   - =wmark_<SFX>=
   - =pn_<N>=
   - =idFact_<SFX>=
   - =pmark_<SFX>=
   - =overprint[BB/HL]_<SID/SFX>=

* RPI Tools
:PROPERTIES:
:CUSTOM_ID: rpi-tools
:END:

"=RPI_Tools=" is nothing more than a version of ="PhilaJ"= with an alternative, stripped down user interface that only exposes the
[[https://richmit.github.io/microscope/leicaS8apo.html#rpi-camera][Raspberry Pi HQ microscope camera functionality]].

The remainder of this section documents the "=RPI_tools=" user interface.

** Activate RPI-Tools

#+ATTR_HTML: :align center :width 800
[[file:RPI_Tools-toolsetmenu.gif][file:RPI_Tools-toolsetmenu.gif]]

Once activated, it will add four buttons to the toolbar:

#+ATTR_HTML: :align center :width 800
[[file:RPI_Tools-toolsetbuttons.gif][file:RPI_Tools-toolsetbuttons.gif]]

** Button Functions

*** Capture Image From RPI Microscope Camera
:PROPERTIES:
:CUSTOM_ID: rpi-capture
:END:

 - file:RPI_Tools-toolsetbutton-capture.gif ::
   Capture, save, and open an image from the camera.  Images are stored in the same location, and with the same file name conventions, used by =piSnap.sh=.

*** Configure RPI Microscope Camera
:PROPERTIES:
:CUSTOM_ID: rpi-settings
:END:

 - file:RPI_Tools-toolsetbutton-settings.gif  :: Change some configuration options

#+ATTR_HTML: :align center :width 400px
[[file:RPI_Tools-dialog-settings.gif][file:RPI_Tools-dialog-settings.gif]]

   - Specify a group for the captured image filenames.
   - Specify an annotation for the captured image filenames.
   - Set captured image format (jpg or png)
   - Set captured image scale (100% or 50%)
   - Set the scale factor for capture preview
   - Set the scale factor for the live video feed
   - Turn on/off asking for settings for each capture -- essentially pops up the settings dialog box everything the capture button is hit
   - Turn on/off repeated capture mode -- repeatedly captures images.  Most useful if a group is set.
   - Turn on/off live video preview before a capture.
   - Turn on/off loading images after capture.
   - Turn on/off running the set image scale tool after each capture if the image scale is not already set
   - Turn on/off debugging

*** Live Video From RPI Microscope Camera (no capture)
:PROPERTIES:
:CUSTOM_ID: rpi-preview
:END:

 - file:RPI_Tools-toolsetbutton-video.gif ::
   Live video feed from camera.  Note the scale setting for the live video feed is different from the capture preview scale.

If "Change Settings Before Capture" is set, then a simplified settings dialog box will appear before the video feed window.

#+ATTR_HTML: :align center :width 400px
[[file:RPI_Tools-dialog-settings-v.gif][file:RPI_Tools-dialog-settings-v.gif]]

*** Load Previous RPI Microscope Camera Captures
:PROPERTIES:
:CUSTOM_ID: rpi-load
:END:

 - file:RPI_Tools-toolsetbutton-load.gif ::
   Load previous capture(s) from camera using the ImageJ/Fiji macro above or the =piSnap.sh= script.

#+ATTR_HTML: :align center :width 400px
[[file:RPI_Tools-dialog-loadOld.gif][file:RPI_Tools-dialog-loadOld.gif]]

*** Set Scale for Stereo Microscope Photograph
:PROPERTIES:
:CUSTOM_ID: scale-rpi
:END:

 - file:RPI_Tools-toolsetbutton-scale.gif ::
   Set image scale based upon microscope settings.  This script contains hardwired settings for my specific microscope and lenses, and may require
   modification for your microscope.

   - The choice of microscope enables a calibration correction factor in the final computation
   - The "Adjust for Resolution" option adjusts the scale if the number of horizontal pixels in the image differs from the horizontal resolution of the
     sensor.  Most commonly this use used when the sensor is used in 2x2 mode yielding smaller image.  This option also works if the image is resized after
     the fact.

#+ATTR_HTML: :align center :width 400px
[[file:RPI_Tools-dialog-setscale.gif][file:RPI_Tools-dialog-setscale.gif]]

